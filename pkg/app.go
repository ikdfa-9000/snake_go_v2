package pkg

import (
	"fmt"
	tb "github.com/nsf/termbox-go"
	"math/rand"
)

type Symbol string

const (
	red    Symbol = "üî¥"
	green         = "üü¢"
	purple        = "üü£"
)

func Run(config Config) {
	state := initState()
	state.menuStringID = 1
	// –í—Å—é –æ—Å—Ç–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å –∫–æ–¥–∞ –∑–∞–∫–ª—é—á–∞–µ–º –≤ for –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º isGameNeeded, isGamePaused, isMenuPaused, isGameOver.
	// –í–æ—Ç –Ω–µ –æ—á–µ–Ω—å —Ö–æ—á–µ—Ç—Å—è –≤–ø–∏—Ö–∏–≤–∞—Ç—å –≤ for –∫—É—á—É if else, –ø–æ–¥—É–º–∞—é –∏ —á—ë-–Ω–∏–±—É–¥—å –∑–∞–º—É—á—É... –±–ª–∏–Ω–±

	rows := config.deskRows
	columns := config.deskColumns
	frameSpeed := float64(config.deskFrameSpeed)
	// –°–æ–∑–¥–∞—ë–º –¥–≤—É–º–µ—Ä–Ω—ã–π —Å–ª–∞–π—Å
	playground := make([][]Symbol, rows)
	// TODO: –¥–æ–¥–µ–ª–∞—Ç—å
	plRow := []Symbol{green, green, green, green, green, green, green, green}
	for i := range playground {
		row := make([]Symbol, columns)
		copy(row, plRow)
		playground[i] = row
	}

	appleCoord := make([]int, 2)
	snakeDirectionHorizontal := 1
	snakeDirectionVertical := 0
	score := 0
	appleScoreAdd := 100
	snakeCord := make([][]int, 3) // –î–≤—É–º–µ—Ä–Ω—ã–π —Å–ª–∞–π—Å –∑–º–µ–π–∫–∏, –∫–∞–∂–¥—ã–π —Å–ª–∞–π—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É
	for i := range snakeCord {
		snakeCord[i] = make([]int, 2)
	}
	keyboardErr := tb.Init()
	if keyboardErr != nil {
		panic(keyboardErr)
	}
	defer tb.Close()
	// –ó–∞–¥–∞—ë–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ–ª–æ–≤–µ –∑–º–µ–∏ –∏ —è–±–ª–æ–∫–∞
	snakeCord[0][0] = columns / 2
	snakeCord[0][1] = rows / 2
	appleCoord[0] = rand.Intn(rows-1) + 0
	appleCoord[1] = rand.Intn(columns-1) + 0
	// –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ–ª–æ–≤—ã –∑–º–µ–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —è–±–ª–æ–∫–æ–º, —Ç–æ –ø–µ—Ä–µ–º–µ—â–∞–µ–º —è–±–ª–æ–∫–æ
	for appleCoord[0] == snakeCord[0][0] && appleCoord[1] == snakeCord[0][1] {
		appleCoord[0] = rand.Intn(rows-1) + 0
		appleCoord[1] = rand.Intn(columns-1) + 0
	}
	playground[snakeCord[0][1]][snakeCord[0][0]] = state.snake.headSymbol
	playground[snakeCord[1][1]][snakeCord[1][0]] = state.snake.symbol
	playground[snakeCord[2][1]][snakeCord[2][0]] = state.snake.symbol
	playground[appleCoord[0]][appleCoord[1]] = state.apple
	go readKey(&snakeDirectionHorizontal, &snakeDirectionVertical, &state)
	for { // for {} == while True. –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ü–∏–∫–ª
		if state.status == gamePauseStatus {
			fmt.Println(appleCoord[1], appleCoord[0])
			render(&rows, &columns, &score, &frameSpeed, &playground)
			if state.status == gameOverStatus {
				for k := 0; k < rows+1; k++ {
					clearRender()
				}
				fmt.Println("Game Over")
				break
			}
		} else {
			// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–∏ –∑–º–µ–π–∫–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π –ø—Ä–∏—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
			// –ü–µ—Ä–≤—É—é –∫–ª–µ—Ç–∫—É –¥–≤–∏–≥–∞–µ–º –≤–ø–µ—Ä—ë–¥
			// –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–ª–µ—Ç–∫—É
			for i := 0; i < state.snake.length; i++ {
				snakeCord[state.snake.length-i][0], snakeCord[state.snake.length-i][1] = snakeCord[state.snake.length-i-1][0], snakeCord[state.snake.length-i-1][1]
				playground[snakeCord[state.snake.length-i][1]][snakeCord[state.snake.length-i][0]] = state.snake.symbol
			}
			// –ü—Ä–æ–≤–µ—Ä–æ—á–∫–∞, —á—Ç–æ–±—ã –≤ —á–∞—Å—Ç–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –∏–∫–æ–Ω–∫–∞ —è–±–ª–æ–∫–∞ –Ω–µ –ø—Ä–æ–ø–∞–¥–∞–ª–∞
			if playground[snakeCord[state.snake.length][1]][snakeCord[state.snake.length][0]] != state.apple {
				playground[snakeCord[state.snake.length][1]][snakeCord[state.snake.length][0]] = state.space
			}
			// –°–º–æ—Ç—Ä–∏–º, –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ –∑–º–µ–π–∫–∞ –∑–∞ —Ä–∞–º–∫–∏
			if snakeCord[0][1]+snakeDirectionVertical == -1 || snakeCord[0][1]+snakeDirectionVertical == rows || snakeCord[0][0]+snakeDirectionHorizontal == -1 || snakeCord[0][0]+snakeDirectionHorizontal == columns {
				// gameOver = true
				switch snakeDirectionVertical {
				case 1:
					snakeCord[0][1] = -1
				case -1:
					snakeCord[0][1] = rows
				default:
					switch snakeDirectionHorizontal { // –¢–∞–∫–æ–≥–æ —É—Ä–æ–¥—Å—Ç–≤–∞ –Ω–µ—Ç –¥–∞–∂–µ –≤ –ø–æ–≥—Ä–µ–±–µ —É –°–∞—Ç–∞–Ω—ã
					case 1:
						snakeCord[0][0] = -1
					case -1:
						snakeCord[0][0] = columns
					}
				}
			}
			if state.status == gameActiveStatus {
				snakeCord[0][1], snakeCord[0][0] = snakeCord[0][1]+snakeDirectionVertical, snakeCord[0][0]+snakeDirectionHorizontal
			}
			// –°–º–æ—Ç—Ä–∏–º, –≤—Ä–µ–∑–∞–µ—Ç—Å—è –ª–∏ –∑–º–µ–π–∫–∞ –∏–ª–∏ –Ω–µ—Ç
			if playground[snakeCord[0][1]][snakeCord[0][0]] == state.snake.symbol {
				state.gameOver()
			}
			playground[snakeCord[0][1]][snakeCord[0][0]] = state.snake.headSymbol
			// –ó–∞—Ö–∞–≤–∞–ª —è–±–ª–æ–∫–æ. –î–µ–ª–∞–µ–º –Ω–æ–≤–æ–µ
			if snakeCord[0][1] == appleCoord[0] && snakeCord[0][0] == appleCoord[1] {
				state.snake.length = state.snake.length + 1
				score = score + appleScoreAdd
				snakeCordAdd := []int{snakeCord[state.snake.length-1][1] - snakeDirectionVertical, snakeCord[state.snake.length-1][0] - snakeDirectionHorizontal}
				snakeCord = append(snakeCord, snakeCordAdd)
				appleCoord[0] = rand.Intn(rows-1) + 0
				appleCoord[1] = rand.Intn(columns-1) + 0
				for i := 0; i < state.snake.length; i++ {
					for appleCoord[1] == snakeCord[i][0] && appleCoord[0] == snakeCord[i][1] {
						// –ï—Å–ª–∏ –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è–±–ª–æ–∫–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ç–µ–ª–æ–º –∑–º–µ–∏, —Ç–æ —è–±–ª–æ–∫–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å
						// TODO: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥, —Å–ø–∞–≤–Ω—è—â–∏–π —è–±–ª–æ–∫–æ –Ω–∞ –∑–º–µ–π–∫–µ
						appleCoord[0] = rand.Intn(rows-1) + 0
						appleCoord[1] = rand.Intn(columns-1) + 0
					}
				}
				playground[appleCoord[0]][appleCoord[1]] = state.apple
			}
			if state.status == gameOverStatus {
				for k := 0; k < rows+1; k++ {
					clearRender()
				}
				fmt.Println("Game Over")
				break
			} else {
				fmt.Println(appleCoord[1], appleCoord[0])
				render(&rows, &columns, &score, &frameSpeed, &playground)
			}
		}
	}
}

func initState() State {
	return State{
		status:       gameActiveStatus, // TODO: temp
		apple:        red,
		space:        green,
		menuStrings:  []string{" –ò–≥—Ä–∞—Ç—å", " –û–ø—Ü–∏–∏", " –í—ã—Ö–æ–¥"},
		menuStringID: 1,
		snake: Snake{
			length:     2,
			symbol:     purple,
			headSymbol: purple,
		},
	}
}

// –°—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –∏–∑–º–µ–Ω—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–º–µ–π–∫–∏.
// –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤—ã–π—Ç–∏
func readKey(horizAddress *int, vertAddress *int, state *State) {
	// –ù–µ –∑–Ω–∞—é, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É –¥–ª—è —Ç—Ä—ë—Ö (–∞ —Å Options –¥–ª—è —Ü–µ–ª—ã—Ö —á–µ—Ç—ã—Ä–µ—Ö) —Å—Ç–µ–π—Ç–æ–≤ –ª–∏—à—å –æ–¥–Ω—É
	// —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–Ω–ø—É—Ç–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.

	for {
		event := tb.PollEvent()

		switch state.status {
		case gameExitStatus:
		case gamePauseStatus:
			// –í–æ –≤—Ä–µ–º—è –ø–∞—É–∑—ã –∏–≥—Ä–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–µ–Ω—è—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–º–µ–π–∫–∏
			switch {
			case event.Ch == 'p':
				state.togglePause()
			case event.Key == tb.KeyCtrlC || event.Key == tb.KeyEsc:
				state.gameOver()
			}

		//case gameOverStatus:
		//case menuActiveStatus:
		//	switch {
		//	case event.Key == tb.KeyArrowUp:
		//		if state.menuStringID == 1 {
		//			state.menuStringID = 3
		//		}
		//	case event.Key == tb.KeyArrowDown:
		//		if state.menuStringID == 3 {
		//			state.menuStringID = 1
		//		}
		//	case event.Key == tb.KeyEnter:
		//		// –¶–∏–∫–ª for –ø–æ—á–µ–º—É-—Ç–æ –ø–æ–º–µ—á–∞–µ—Ç –¥–∞–ª—å–Ω–µ–π—à–∏–π –∫–æ–¥ –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º—ã–π... —Ö–∑
		//		fmt.Printf("\033[1A\033[K")
		//		fmt.Printf("\033[1A\033[K")
		//		fmt.Printf("\033[1A\033[K")
		//		fmt.Printf("\033[1A\033[K")
		//		fmt.Printf("\033[1A\033[K")
		//		fmt.Printf("\033[1A\033[K")
		//		fmt.Printf("\033[1A\033[K")
		//		state.menuInitialize()
		//	}
		case gameActiveStatus:
			switch {
			case event.Ch == 'p':
				state.togglePause()
			case event.Key == tb.KeyCtrlC || event.Key == tb.KeyEsc:
				state.gameOver()

			case event.Ch == 'a' || event.Key == tb.KeyArrowLeft:
				if *horizAddress == 0 {
					*horizAddress = -1
					*vertAddress = 0
				}
			case event.Ch == 's' || event.Key == tb.KeyArrowDown:
				if *vertAddress == 0 {
					*horizAddress = 0
					*vertAddress = 1
				}
			case event.Ch == 'd' || event.Key == tb.KeyArrowRight:
				if *horizAddress == 0 {
					*horizAddress = 1
					*vertAddress = 0
				}
			case event.Ch == 'w' || event.Key == tb.KeyArrowUp:
				if *vertAddress == 0 {
					*horizAddress = 0
					*vertAddress = -1
				}
			}
		}
	}
}
