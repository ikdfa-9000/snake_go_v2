package main

import (
	"bufio"
	"fmt"
	"log"
	"math/rand"
	"os"
	"strconv"
	"time"

	tb "github.com/nsf/termbox-go"
)

func main() {
	input, err := os.Open("config.txt") // –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞
	if err != nil {
		println(err)
		log.Fatal("–§–∞–π–ª–∞ –Ω–µ—Ç")
	}
	defer input.Close()
	configFile := bufio.NewScanner(input) // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–∞–Ω–µ—Ä–∞.
	configFile.Scan()
	deskSizeVert, err := strconv.Atoi(configFile.Text())
	if err != nil {
		log.Fatal("–•–æ–ø–∞! –ê —è –Ω–µ –º–æ–≥—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å, —á—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª–µ")
	}
	configFile.Scan()
	deskSizeHoriz, err := strconv.Atoi(configFile.Text())
	if err != nil {
		log.Fatal("–•–æ–ø–∞! –ê —è –Ω–µ –º–æ–≥—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å, —á—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª–µ")
	}
	configFile.Scan()
	frameSpeed, errSpeed := strconv.ParseFloat(configFile.Text(), 32)
	if errSpeed != nil {
		log.Fatal("–•–æ–ø–∞! –ê —è –Ω–µ –º–æ–≥—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å, —á—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª–µ")
	}
	// –°–æ–∑–¥–∞—ë–º –¥–≤—É–º–µ—Ä–Ω—ã–π —Å–ª–∞–π—Å
	playground := make([][]string, deskSizeVert)
	for i := range playground {
		playground[i] = make([]string, deskSizeHoriz)
	}
	appleSymbol := "üî¥ "
	spaceSymbol := "üü¢"
	snakeSymbol := "üü£"
	snakeHeadSymbol := "üü£"
	appleCord := make([]int, 2)
	snakeDirectionHorizontal := 1
	snakeDirectionVertical := 0
	gameOver := false
	snakeLength := 2
	score := 0
	appleScoreAdd := 100
	// –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–≤—É–º–µ—Ä–Ω—ã–π —Å–ª–∞–π—Å, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±–µ–ª—ã
	for i := 0; i < deskSizeVert; i++ {
		for j := 0; j < deskSizeHoriz; j++ {
			playground[i][j] = spaceSymbol
		}
	}
	snakeCord := make([][]int, 3) // –î–≤—É–º–µ—Ä–Ω—ã–π —Å–ª–∞–π—Å –∑–º–µ–π–∫–∏, –∫–∞–∂–¥—ã–π —Å–ª–∞–π—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É
	for i := range snakeCord {
		snakeCord[i] = make([]int, 2)
	}
	keyboardErr := tb.Init()
	if keyboardErr != nil {
		panic(keyboardErr)
	}
	defer tb.Close()
	// –ó–∞–¥–∞—ë–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ–ª–æ–≤–µ –∑–º–µ–∏ –∏ —è–±–ª–æ–∫–∞
	snakeCord[0][0] = deskSizeHoriz / 2
	snakeCord[0][1] = deskSizeVert / 2
	appleCord[0] = rand.Intn(deskSizeVert-1) + 0
	appleCord[1] = rand.Intn(deskSizeHoriz-1) + 0
	// –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ–ª–æ–≤—ã –∑–º–µ–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —è–±–ª–æ–∫–æ–º, —Ç–æ –ø–µ—Ä–µ–º–µ—â–∞–µ–º —è–±–ª–æ–∫–æ
	for appleCord[0] == snakeCord[0][0] && appleCord[1] == snakeCord[0][1] {
		appleCord[0] = rand.Intn(deskSizeVert-1) + 0
		appleCord[1] = rand.Intn(deskSizeHoriz-1) + 0
	}
	playground[snakeCord[0][1]][snakeCord[0][0]] = snakeHeadSymbol
	playground[snakeCord[1][1]][snakeCord[1][0]] = snakeSymbol
	playground[snakeCord[2][1]][snakeCord[2][0]] = snakeSymbol
	playground[appleCord[0]][appleCord[1]] = appleSymbol
	go readKey(&snakeDirectionHorizontal, &snakeDirectionVertical)
	for { // for {} == while True. –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ü–∏–∫–ª
		// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–∏ –∑–º–µ–π–∫–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π –ø—Ä–∏—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
		// –ü–µ—Ä–≤—É—é –∫–ª–µ—Ç–∫—É –¥–≤–∏–≥–∞–µ–º –≤–ø–µ—Ä—ë–¥
		// –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–ª–µ—Ç–∫—É
		for i := 0; i < snakeLength; i++ {
			snakeCord[snakeLength-i][0], snakeCord[snakeLength-i][1] = snakeCord[snakeLength-i-1][0], snakeCord[snakeLength-i-1][1]
			playground[snakeCord[snakeLength-i][1]][snakeCord[snakeLength-i][0]] = snakeSymbol
		}
		// –ü—Ä–æ–≤–µ—Ä–æ—á–∫–∞, —á—Ç–æ–±—ã –≤ —á–∞—Å—Ç–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –∏–∫–æ–Ω–∫–∞ —è–±–ª–æ–∫–∞ –Ω–µ –ø—Ä–æ–ø–∞–¥–∞–ª–∞
		if playground[snakeCord[snakeLength][1]][snakeCord[snakeLength][0]] != appleSymbol {
			playground[snakeCord[snakeLength][1]][snakeCord[snakeLength][0]] = spaceSymbol
		}
		// –°–º–æ—Ç—Ä–∏–º, –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ –∑–º–µ–π–∫–∞ –∑–∞ —Ä–∞–º–∫–∏
		if snakeCord[0][1]+snakeDirectionVertical == -1 || snakeCord[0][1]+snakeDirectionVertical == deskSizeVert || snakeCord[0][0]+snakeDirectionHorizontal == -1 || snakeCord[0][0]+snakeDirectionHorizontal == deskSizeHoriz {
			// gameOver = true
			switch snakeDirectionVertical {
			case 1:
				snakeCord[0][1] = -1
			case -1:
				snakeCord[0][1] = deskSizeVert
			default:
				switch snakeDirectionHorizontal { // –¢–∞–∫–æ–≥–æ —É—Ä–æ–¥—Å—Ç–≤–∞ –Ω–µ—Ç –¥–∞–∂–µ –≤ –ø–æ–≥—Ä–µ–±–µ —É –°–∞—Ç–∞–Ω—ã
				case 1:
					snakeCord[0][0] = -1
				case -1:
					snakeCord[0][0] = deskSizeHoriz
				}
			}
		}
		if !gameOver {
			snakeCord[0][1], snakeCord[0][0] = snakeCord[0][1]+snakeDirectionVertical, snakeCord[0][0]+snakeDirectionHorizontal
		}
		// –°–º–æ—Ç—Ä–∏–º, –≤—Ä–µ–∑–∞–µ—Ç—Å—è –ª–∏ –∑–º–µ–π–∫–∞ –∏–ª–∏ –Ω–µ—Ç
		if playground[snakeCord[0][1]][snakeCord[0][0]] == snakeSymbol {
			gameOver = true
		}
		playground[snakeCord[0][1]][snakeCord[0][0]] = snakeHeadSymbol
		// –ó–∞—Ö–∞–≤–∞–ª —è–±–ª–æ–∫–æ. –î–µ–ª–∞–µ–º –Ω–æ–≤–æ–µ
		if snakeCord[0][1] == appleCord[0] && snakeCord[0][0] == appleCord[1] {
			snakeLength = snakeLength + 1
			score = score + appleScoreAdd
			snakeCordAdd := []int{snakeCord[snakeLength-1][1] - snakeDirectionVertical, snakeCord[snakeLength-1][0] - snakeDirectionHorizontal}
			snakeCord = append(snakeCord, snakeCordAdd)
			appleCord[0] = rand.Intn(deskSizeVert-1) + 0
			appleCord[1] = rand.Intn(deskSizeHoriz-1) + 0
			for i := 0; i < snakeLength; i++ {
				for appleCord[1] == snakeCord[i][0] && appleCord[0] == snakeCord[i][1] {
					// –ï—Å–ª–∏ –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è–±–ª–æ–∫–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ç–µ–ª–æ–º –∑–º–µ–∏, —Ç–æ —è–±–ª–æ–∫–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å
					appleCord[0] = rand.Intn(deskSizeVert-1) + 0
					appleCord[1] = rand.Intn(deskSizeHoriz-1) + 0
				}
			}
			playground[appleCord[0]][appleCord[1]] = appleSymbol
		}
		if gameOver {
			for k := 0; k < deskSizeVert+1; k++ {
				fmt.Printf("\033[1A\033[K")
			}
			fmt.Println("Game Over")
			break
		} else {
			fmt.Println(appleCord[1], appleCord[0])
			render(&deskSizeVert, &deskSizeHoriz, &score, &frameSpeed, &playground)
		}
	}
}

func readKey(horizAddress *int, vertAddress *int) { // –ß—Ç–µ–Ω–∏–µ –∏–Ω–ø—É—Ç–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –ù–µ–Ω–∞–≤–∏–∂—É
	for {
		event := tb.PollEvent()
		switch {
		case event.Ch == 'a':
			if *horizAddress == 0 {
				*horizAddress = -1
				*vertAddress = 0
			}
		case event.Ch == 's':
			if *vertAddress == 0 {
				*horizAddress = 0
				*vertAddress = 1
			}
		case event.Ch == 'd':
			if *horizAddress == 0 {
				*horizAddress = 1
				*vertAddress = 0
			}
		case event.Ch == 'w':
			if *vertAddress == 0 {
				*horizAddress = 0
				*vertAddress = -1
			}
		}
	}
}

func render(deskLinkVert *int, deskLinkHoriz *int, scoreLink *int, speedLink *float64, playgroundLink *[][]string) {
	for k := 0; k < *deskLinkVert; k++ { // –í—ã–≤–æ–¥ –º–∞—Ç—Ä–∏—Ü—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
		for l := 0; l < *deskLinkHoriz; l++ {
			fmt.Print((*playgroundLink)[k][l])
		}
		fmt.Println()
	}
	fmt.Println("_____________________")
	fmt.Println("Score: ", *scoreLink)
	time.Sleep(time.Duration(*speedLink) * time.Millisecond)
	for k := 0; k < *deskLinkVert+3; k++ {
		fmt.Printf("\033[1A\033[K")
	}
}
